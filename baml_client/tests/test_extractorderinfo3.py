# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import Address, IExtractOrderInfo3, IExtractOrderInfo3Stream, Item, OrderInfo3, States
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any


@baml.ExtractOrderInfo3.test(stream=True)
async def test_test1(ExtractOrderInfo3Impl: IExtractOrderInfo3Stream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("In the vibrant online marketplace, a customer recently completed a purchase with order ID \"ORD1234567\". This transaction, totaling $85 without accounting for shipping costs, included an eclectic mix of items: a handcrafted ceramic vase, a set of artisanal kitchen knives, and a vintage-inspired wall clock. The order is destined for 456 Artisan Way in the bustling city of portland, adhering to the lowercase convention for city names. Oregon, represented by its abbreviation \"OR\" as per the predefined states, is where this delightful array will find its new home, at the ZIP code 97205. This meticulous record encapsulates not just a transaction but the seamless fusion of commerce and craftsmanship, poised to enrich the living space of its recipient.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with ExtractOrderInfo3Impl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

