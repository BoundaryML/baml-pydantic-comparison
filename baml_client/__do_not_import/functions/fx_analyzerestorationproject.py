# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_complexrestorationproject import ComplexRestorationProject
from ..types.classes.cls_manuscriptcondition import ManuscriptCondition
from ..types.classes.cls_manuscriptcontext import ManuscriptContext
from ..types.classes.cls_restoration import Restoration
from ..types.enums.enm_manuscriptstate import ManuscriptState
from ..types.enums.enm_materialorigin import MaterialOrigin
from ..types.enums.enm_timeperiod import TimePeriod
from ..types.partial.classes.cls_complexrestorationproject import PartialComplexRestorationProject
from ..types.partial.classes.cls_manuscriptcondition import PartialManuscriptCondition
from ..types.partial.classes.cls_manuscriptcontext import PartialManuscriptContext
from ..types.partial.classes.cls_restoration import PartialRestoration
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IAnalyzeRestorationProjectOutput = ComplexRestorationProject

@runtime_checkable
class IAnalyzeRestorationProject(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: str

    Returns:
        ComplexRestorationProject
    """

    async def __call__(self, arg: str, /) -> ComplexRestorationProject:
        ...

   

@runtime_checkable
class IAnalyzeRestorationProjectStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: str

    Returns:
        AsyncStream[ComplexRestorationProject, PartialComplexRestorationProject]
    """

    def __call__(self, arg: str, /) -> AsyncStream[ComplexRestorationProject, PartialComplexRestorationProject]:
        ...
class IBAMLAnalyzeRestorationProject(BaseBAMLFunction[ComplexRestorationProject, PartialComplexRestorationProject]):
    def __init__(self) -> None:
        super().__init__(
            "AnalyzeRestorationProject",
            IAnalyzeRestorationProject,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> ComplexRestorationProject:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[ComplexRestorationProject, PartialComplexRestorationProject]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLAnalyzeRestorationProject = IBAMLAnalyzeRestorationProject()

__all__ = [ "BAMLAnalyzeRestorationProject" ]
