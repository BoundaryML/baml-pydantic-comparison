# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_item import Item
from ..types.classes.cls_orderinfo2 import OrderInfo2
from ..types.partial.classes.cls_item import PartialItem
from ..types.partial.classes.cls_orderinfo2 import PartialOrderInfo2
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IExtractOrderInfo2Output = OrderInfo2

@runtime_checkable
class IExtractOrderInfo2(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: str

    Returns:
        OrderInfo2
    """

    async def __call__(self, arg: str, /) -> OrderInfo2:
        ...

   

@runtime_checkable
class IExtractOrderInfo2Stream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: str

    Returns:
        AsyncStream[OrderInfo2, PartialOrderInfo2]
    """

    def __call__(self, arg: str, /) -> AsyncStream[OrderInfo2, PartialOrderInfo2]:
        ...
class IBAMLExtractOrderInfo2(BaseBAMLFunction[OrderInfo2, PartialOrderInfo2]):
    def __init__(self) -> None:
        super().__init__(
            "ExtractOrderInfo2",
            IExtractOrderInfo2,
            ["v2"],
        )

    async def __call__(self, *args, **kwargs) -> OrderInfo2:
        return await self.get_impl("v2").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[OrderInfo2, PartialOrderInfo2]:
        res = self.get_impl("v2").stream(*args, **kwargs)
        return res

BAMLExtractOrderInfo2 = IBAMLExtractOrderInfo2()

__all__ = [ "BAMLExtractOrderInfo2" ]
